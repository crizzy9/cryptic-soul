---
import SideBarFooter from "./SideBarFooter.astro";
import { Image } from "astro:assets";
import SideBarMenu from "./SideBarMenu.astro";
const { sideBarActiveItemID } = Astro.props;
---

<div class="drawer-side z-40">
  <label for="my-drawer" class="drawer-overlay"></label>
  <aside class="sidebar px-2 pt-2 h-auto min-h-full w-[19rem] bg-base-200 text-base-content flex flex-col transition-all duration-200 ease-in-out">
    <button id="sidebar-toggle" class="btn btn-ghost btn-sm self-end" aria-label="Toggle sidebar">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 transition-transform" data-chevron>
        <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
      </svg>
    </button>
    <div class="w-fit mx-auto mt-5 mb-6">
      <a href="/">
        <div class="avatar transition ease-in-out hover:scale-[102%] block m-auto">
          <div class="w-[8.5rem]">
            <Image class="mask mask-circle" format="webp" width={300} height={300} src="/potrait.webp" alt="Profile image" />
          </div>
        </div>
      </a>
    </div>
    <div class="text-center mb-4">
      <h2 class="text-lg font-bold text-base-content">Shyam Padia</h2>
    </div>
    <SideBarMenu sideBarActiveItemID={sideBarActiveItemID} />
    <SideBarFooter />
  </aside>
</div>

<script>
  function initSidebar() {
    const aside = document.querySelector('aside.sidebar');
    const toggleBtn = document.getElementById('sidebar-toggle');

    const applyCollapsedState = (collapsed: boolean) => {
      if (!aside) return;
      aside.classList.toggle('collapsed', collapsed);
    };

    const saved = typeof localStorage !== 'undefined' ? localStorage.getItem('sidebarCollapsed') : null;
    const initialCollapsed = saved === '1';
    applyCollapsedState(initialCollapsed);

    if (toggleBtn) {
      toggleBtn.onclick = () => {
        const isCollapsed = aside?.classList.contains('collapsed') ?? false;
        const willCollapse = !isCollapsed;
        applyCollapsedState(willCollapse);
        try { localStorage.setItem('sidebarCollapsed', willCollapse ? '1' : '0'); } catch (e) {}
      };
    }
  }

  const BOUND_ATTR = 'data-sidebar-events-bound';
  const rootEl = document.documentElement;
  if (!rootEl.hasAttribute(BOUND_ATTR)) {
    rootEl.setAttribute(BOUND_ATTR, 'true');
    document.addEventListener('astro:page-load', () => {
      requestAnimationFrame(() => initSidebar());
    });
    document.addEventListener('astro:after-swap', () => {
      requestAnimationFrame(() => initSidebar());
    });
  }

  requestAnimationFrame(() => initSidebar());
</script>

<style>
  /* Collapsed sidebar width and basic layout adjustments */
  :global(.sidebar.collapsed) {
    width: 4.5rem;
  }

  /* Hide large avatar when collapsed */
  :global(.sidebar.collapsed .avatar) {
    display: none;
  }

  /* Hide name and subtitle when collapsed */
  :global(.sidebar.collapsed .text-center) {
    display: none;
  }

  /* Menu item adjustments in collapsed state: center icons, hide text */
  :global(.sidebar.collapsed .menu li a) {
    justify-content: center;
    padding-left: 0;
    padding-right: 0;
  }
  :global(.sidebar.collapsed .menu li a .sidebar-text) {
    display: none;
  }

  /* Footer icons vertical alignment when collapsed */
  :global(.sidebar.collapsed .social-icons) {
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }
  :global(.sidebar.collapsed .social-icons a) {
    margin-left: 0;
    margin-right: 0;
  }

  /* Hide decorative gradient spacer above footer when collapsed */
  :global(.sidebar.collapsed .sticky.block) {
    display: none;
  }

  /* Rotate chevron when collapsed */
  :global(.sidebar [data-chevron]) {
    transform: rotate(0deg);
  }
  :global(.sidebar.collapsed [data-chevron]) {
    transform: rotate(180deg);
  }
</style>
